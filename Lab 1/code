import numpy as np
import random
import matplotlib.pyplot as plt

# Function to calculate the total distance of a route
def calculate_total_distance(route, cities):
    total_distance = 0
    for i in range(len(route) - 1):
        total_distance += np.linalg.norm(np.array(cities[route[i]]) - np.array(cities[route[i + 1]]))
    # Add distance to return to the starting point
    total_distance += np.linalg.norm(np.array(cities[route[-1]]) - np.array(cities[route[0]]))
    return total_distance

# Initialize population: Random routes
def initialize_population(pop_size, num_cities):
    population = []
    for _ in range(pop_size):
        route = list(range(num_cities))
        random.shuffle(route)
        population.append(route)
    return population

# Selection: Tournament selection
def selection(population, cities):
    fitness = []
    for route in population:
        fitness.append(1 / calculate_total_distance(route, cities))  # Inverse of distance (shorter is better)
    total_fitness = sum(fitness)
    selected_parents = random.choices(population, weights=fitness, k=2)
    return selected_parents

# Crossover: Order Crossover (OX) method
def crossover(parent1, parent2):
    size = len(parent1)
    start, end = sorted(random.sample(range(size), 2))
    
    child = [-1] * size
    child[start:end+1] = parent1[start:end+1]
    
    current_position = end + 1
    for i in range(size):
        if parent2[i] not in child:
            if current_position == size:
                current_position = 0
            child[current_position] = parent2[i]
            current_position += 1
    
    return child

# Mutation: Swap mutation
def mutate(route):
    idx1, idx2 = random.sample(range(len(route)), 2)
    route[idx1], route[idx2] = route[idx2], route[idx1]
    return route

# Main Genetic Algorithm function
def genetic_algorithm(cities, pop_size, generations, mutation_rate, crossover_rate):
    num_cities = len(cities)
    population = initialize_population(pop_size, num_cities)
    best_route = None
    best_distance = float('inf')

    for generation in range(generations):
        new_population = []
        
        for _ in range(pop_size // 2):
            parent1, parent2 = selection(population, cities)
            if random.random() < crossover_rate:
                child1 = crossover(parent1, parent2)
                child2 = crossover(parent2, parent1)
            else:
                child1, child2 = parent1, parent2  # No crossover, just parents
            
            if random.random() < mutation_rate:
                child1 = mutate(child1)
            if random.random() < mutation_rate:
                child2 = mutate(child2)
            
            new_population.extend([child1, child2])
        
        population = new_population
        
        # Evaluate the best solution so far
        for route in population:
            distance = calculate_total_distance(route, cities)
            if distance < best_distance:
                best_route = route
                best_distance = distance

        print(f"Generation {generation + 1}: Best Distance = {best_distance}")
    
    return best_route, best_distance

# Visualization function
def plot_route(route, cities):
    route_cities = [cities[i] for i in route] + [cities[route[0]]]  # Complete the loop
    route_cities = np.array(route_cities)
    plt.plot(route_cities[:, 0], route_cities[:, 1], marker='o')
    plt.scatter(route_cities[:, 0], route_cities[:, 1], color='red')
    plt.show()

# Example usage
if __name__ == "__main__":
    # Define the coordinates of cities (e.g., 5 cities)
    cities = np.array([
        [0, 0],  # City 1
        [1, 2],  # City 2
        [4, 0],  # City 3
        [4, 3],  # City 4
        [2, 4],  # City 5
    ])
    
    # Parameters
    population_size = 50
    generations = 500
    mutation_rate = 0.1
    crossover_rate = 0.9
    
    # Run Genetic Algorithm
    best_route, best_distance = genetic_algorithm(cities, population_size, generations, mutation_rate, crossover_rate)
    
    # Output the best solution found
    print(f"Best Route: {best_route}")
    print(f"Best Distance: {best_distance}")
    
    # Plot the best route
    plot_route(best_route, cities)
