import numpy as np

class GreyWolfOptimizer:
    def __init__(self, func, dim, num_wolves, max_iter):
        self.func = func  # The objective function to maximize (solar energy)
        self.dim = dim  # Dimension of the search space (tilt and orientation)
        self.num_wolves = num_wolves  # Number of wolves in the population
        self.max_iter = max_iter  # Maximum number of iterations
        
        # Initialize the position of wolves randomly
        self.wolves_pos = np.random.uniform(-90, 90, (self.num_wolves, self.dim))  # Angles between -90 and 90
        self.alpha_pos = np.zeros(self.dim)
        self.beta_pos = np.zeros(self.dim)
        self.delta_pos = np.zeros(self.dim)
        self.alpha_score = float("-inf")
        self.beta_score = float("-inf")
        self.delta_score = float("-inf")

    def fitness(self, pos):
        """Evaluate the fitness of a position (solar energy)"""
        tilt_angle = pos[0]
        orientation_angle = pos[1]
        
        # Simulate a simple energy function based on tilt and orientation.
        # This is just a mock function that peaks at tilt=30 and orientation=0 degrees
        energy_output = np.sin(np.radians(tilt_angle)) * np.cos(np.radians(orientation_angle)) + 1
        
        return energy_output  # Higher is better

    def update_positions(self, a):
        """Update the positions of wolves"""
        for i in range(self.num_wolves):
            r1 = np.random.random(self.dim)
            r2 = np.random.random(self.dim)
            
            A1 = 2 * a * r1 - a  # Coefficient for alpha wolf
            C1 = 2 * r2  # Coefficient for alpha wolf

            A2 = 2 * a * r1 - a  # Coefficient for beta wolf
            C2 = 2 * r2  # Coefficient for beta wolf

            A3 = 2 * a * r1 - a  # Coefficient for delta wolf
            C3 = 2 * r2  # Coefficient for delta wolf

            # Update the position of the current wolf based on the alpha, beta, and delta wolves
            D_alpha = np.abs(C1 * self.alpha_pos - self.wolves_pos[i, :])
            D_beta = np.abs(C2 * self.beta_pos - self.wolves_pos[i, :])
            D_delta = np.abs(C3 * self.delta_pos - self.wolves_pos[i, :])

            X1 = self.alpha_pos - A1 * D_alpha
            X2 = self.beta_pos - A2 * D_beta
            X3 = self.delta_pos - A3 * D_delta

            # Update the position of the current wolf
            self.wolves_pos[i, :] = (X1 + X2 + X3) / 3

    def optimize(self):
        """Run the Grey Wolf Optimizer"""
        for t in range(self.max_iter):
            a = 2 - t * (2 / self.max_iter)  # Coefficient decreases over time

            for i in range(self.num_wolves):
                fitness_score = self.fitness(self.wolves_pos[i, :])

                # Update the alpha, beta, and delta wolves
                if fitness_score > self.alpha_score:
                    self.alpha_score = fitness_score
                    self.alpha_pos = self.wolves_pos[i, :]
                elif fitness_score > self.beta_score:
                    self.beta_score = fitness_score
                    self.beta_pos = self.wolves_pos[i, :]
                elif fitness_score > self.delta_score:
                    self.delta_score = fitness_score
                    self.delta_pos = self.wolves_pos[i, :]

            # Update the positions of the wolves
            self.update_positions(a)

            print(f"Iteration {t+1}/{self.max_iter}, Best Solar Energy: {self.alpha_score}")

        return self.alpha_pos, self.alpha_score

# Set up the optimizer for Solar Panel Placement
dim = 2  # Two parameters to optimize: tilt angle and orientation angle
num_wolves = 15  # Number of wolves
max_iter = 50  # Number of iterations

# Initialize the Grey Wolf Optimizer
gwo = GreyWolfOptimizer(func=lambda x: x[0] * x[1], dim=dim, num_wolves=num_wolves, max_iter=max_iter)

# Optimize the placement of the solar panel
best_position, best_score = gwo.optimize()

print("Best Placement (Tilt Angle, Orientation Angle):", best_position)
print("Best Solar Energy Output:", best_score)
